getwd()
# created README.md for Github landing page
usethis::use_readme_md(open = FALSE)
# Adape the readme.
# creates license file
usethis::use_mit_license("Sahir Bhatnagar")
# creates news file
usethis::use_news_md(open = FALSE)
api_connect <- function(api_key, api_secret) {
base_url <- 'http://173.249.41.98/api'
headers <- list(
"Api-Key" = api_key,
"Api-Secret" = api_secret
)
return(list(base_url = base_url, headers = headers))
}
get_news <- function(connect_info, start_date, end_date) {
base_url <- connect_info$base_url
if (is.null(start_date) || is.null(end_date)) {
stop("start_date and end_date are required")
}
start_date <- format(start_date, "%d-%m-%Y")
end_date <- format(end_date, "%d-%m-%Y")
url <- paste0(base_url, "/news/?start_date=", start_date, "&end_date=", end_date)
response <- GET(url, add_headers(.headers = connect_info$headers))
if (http_type(response) == "application/json" && response$status_code == 200) {
json_data <- content(response, as = "text")
news_df <- lapply(fromJSON(json_data)$data, function(news) {
data.frame(
id = news$id,
title = news$title,
description = news$description,
content = news$content,
date = as.Date(news$date),
country = news$country,
countrysort = news$countrysort,
ncomments = news$ncomments,
mentions = news$mentions
)
})
return(do.call(rbind, news_df))
} else {
error <- content(response, as = "text")
if ("detail" %in% names(error)) {
stop(error$detail)
} else if ("message" %in% names(error)) {
stop(error$message)
} else {
stop("An error occured")
}
}
}
# Utilisation des fonctions
api_key <- "6a07a7ee-ade3-4209-aa1b-b4504ebc0e68"
api_secret <- "pbkdf2_sha256$600000$eVJKaltgn341HcwJWfVlWg$bpuIG09itt+g1R2MDOzS/QMoJstT6bWZTTVTcQlQ3cc="
conn <- api_connect(api_key, api_secret)
conn
start_date <- as.Date("2024-01-01")
end_date <- as.Date("2024-01-31")
news <- get_news(conn, start_date, end_date)
??fromJSON
get_news <- function(connect_info, start_date, end_date) {
base_url <- connect_info$base_url
if (is.null(start_date) || is.null(end_date)) {
stop("start_date and end_date are required")
}
start_date <- format(start_date, "%d-%m-%Y")
end_date <- format(end_date, "%d-%m-%Y")
url <- paste0(base_url, "/news/?start_date=", start_date, "&end_date=", end_date)
response <- httr::GET(url, add_headers(.headers = connect_info$headers))
if (http_type(response) == "application/json" && response$status_code == 200) {
json_data <- content(response, as = "text")
news_df <- lapply(jsonlite::fromJSON(json_data)$data, function(news) {
data.frame(
id = news$id,
title = news$title,
description = news$description,
content = news$content,
date = as.Date(news$date),
country = news$country,
countrysort = news$countrysort,
ncomments = news$ncomments,
mentions = news$mentions
)
})
return(do.call(rbind, news_df))
} else {
error <- content(response, as = "text")
if ("detail" %in% names(error)) {
stop(error$detail)
} else if ("message" %in% names(error)) {
stop(error$message)
} else {
stop("An error occured")
}
}
}
# Utilisation des fonctions
library(jsonlite)
library(httr)
news <- get_news(conn, start_date, end_date)
api_connect <- function(api_key, api_secret) {
base_url <- 'http://173.249.41.98/api'
headers <- c(
"Api-Key" = api_key,
"Api-Secret" = api_secret
)
return(list(base_url = base_url, headers = headers))
}
conn <- api_connect(api_key, api_secret)
conn
news <- get_news(conn, start_date, end_date)
api_key <- "6a07a7ee-ade3-4209-aa1b-b4504ebc0e68"
api_secret <- "pbkdf2_sha256$600000$eVJKaltgn341HcwJWfVlWg$bpuIG09itt+g1R2MDOzS/QMoJstT6bWZTTVTcQlQ3cc="
conn <- api_connect(api_key, api_secret)
conn
start_date <- as.Date("2024-01-01")
end_date <- as.Date("2024-01-31")
start_date <- format(start_date, "%d-%m-%Y")
end_date <- format(end_date, "%d-%m-%Y")
start_date
url <- paste0(base_url, "/news/?start_date=", start_date, "&end_date=", end_date)
connect_info=conn
base_url <- connect_info$base_url
base_url
url <- paste0(base_url, "/news/?start_date=", start_date, "&end_date=", end_date)
url
response <- httr::GET(url, add_headers(.headers = connect_info$headers))
response
connect_info$headers
?GET
response$status_code
api_key <- "6a07a7ee-ade3-4209-aa1b-b4504ebc0e68"
api_secret <- "pbkdf2_sha256$600000$eVJKaltgn341HcwJWfVlWg$bpuIG09itt+g1R2MDOzS/QMoJstT6bWZTTVTcQlQ3cc="
api_connect <- function(api_key, api_secret) {
base_url <- 'http://173.249.41.98/api'
headers <- c(
"Api-Key" = api_key,
"Api-Secret" = api_secret
)
return(list(base_url = base_url, headers = headers))
}
conn <- api_connect(api_key, api_secret)
start_date <- as.Date("2024-01-01")
end_date <- as.Date("2024-01-31")
news <- get_news(conn, start_date, end_date)
headers <- list(
"Api-Key" = api_key,
"Api-Secret" = api_secret
)
url <- paste0(base_url, "/news/?start_date=", start_date, "&end_date=", end_date)
response <- GET(url, add_headers(.headers=headers))
content(response, as = "text")
headers <- list(
"Api-Key" = api_key,
"Api-Secret" = api_secret
)
url <- paste0(base_url, "/news/?start_date=", start_date, "&end_date=", end_date)
response <- GET(url, add_headers(headers=headers))
response <- httr::GET(url, add_headers(headers = connect_info$headers))
response
response <- httr::GET(url, add_headers(.headers = connect_info$headers))
response
http_type(response)
response$status_code
api_key <- "6a07a7ee-ade3-4209-aa1b-b4504ebc0e68"
api_secret <- "pbkdf2_sha256$600000$eVJKaltgn341HcwJWfVlWg$bpuIG09itt+g1R2MDOzS/QMoJstT6bWZTTVTcQlQ3cc="
conn <- api_connect(api_key, api_secret)
conn
conn$base_url
conn$headers
headers <- c(
"Api-Key" = api_key,
"Api-Secret" = api_secret
)
headers
headers = {
"Api-Key": self.api_key,
"Api-Secret": self.api_secret
}
headers = {
"Api-Key": self.api_key,
"Api-Secret": self.api_secret
}
reticulate::repl_python()
list(
"Api-Key" = api_key,
"Api-Secret" = api_secret
)
headers <- list(
"Api-Key" = api_key,
"Api-Secret" = api_secret
)
as.character(headers)
api_connect <- function(api_key, api_secret) {
base_url <- 'http://173.249.41.98/api'
headers <- list(
"Api-Key" = api_key,
"Api-Secret" = api_secret
)
return(list(base_url = base_url, headers = headers))
}
conn <- api_connect(api_key, api_secret)
conn
header_string <- paste0("Api-Key: ", api_key, "\n", "Api-Secret: ", api_secret)
header_string
url
response <- httr::GET(url, add_headers(.headers = header_string))
response
list(
"Api-Key" = api_key,
"Api-Secret" = api_secret
)
headers <- c(
`Api-Key` = api_key,
`Api-Secret` = api_secret
)
headers
headers <- list(
"Api-Key" = "6a07a7ee-ade3-4209-aa1b-b4504ebc0e68",
"Api-Secret" = "pbkdf2_sha256$600000$eVJKaltgn341HcwJWfVlWg$bpuIG09itt+g1R2MDOzS/QMoJstT6bWZTTVTcQlQ3cc="
)
headers
headers <- list(
`Api-Key` = api_key,
`Api-Secret` = api_secret
)
headers
response <- httr::GET(url, add_headers(.headers = headers))
header_string <- paste0(
"Api-Key: ", api_key,
"Api-Secret: ", api_secret
)
response <- httr::GET(url, add_headers(.headers = header_string))
response
headers <- c(
"Api-Key" = api_key,
"Api-Secret" = api_secret
)
headers
headers <- c(
"Api-Key" = "6a07a7ee-ade3-4209-aa1b-b4504ebc0e68",
"Api-Secret" = "pbkdf2_sha256$600000$eVJKaltgn341HcwJWfVlWg$bpuIG09itt+g1R2MDOzS/QMoJstT6bWZTTVTcQlQ3cc="
)
response <- httr::GET(url, httr::add_headers(headers))
response
response <- httr::GET(url, headers)
url
response <- httr::GET(url, add_headers(.headers = c("Api-Key=6a07a7ee-ade3-4209-aa1b-b4504ebc0e68",
"Api-Secret=pbkdf2_sha256$600000$eVJKaltgn341HcwJWfVlWg$bpuIG09itt+g1R2MDOzS/QMoJstT6bWZTTVTcQlQ3cc=")))
response
response <- httr::GET(url, add_headers(.headers = c("Api-Key:6a07a7ee-ade3-4209-aa1b-b4504ebc0e68",
"Api-Secret:pbkdf2_sha256$600000$eVJKaltgn341HcwJWfVlWg$bpuIG09itt+g1R2MDOzS/QMoJstT6bWZTTVTcQlQ3cc=")))
response
response <- httr::GET(url, add_headers(.headers = c(Api-Key="6a07a7ee-ade3-4209-aa1b-b4504ebc0e68",
Api-Secret="pbkdf2_sha256$600000$eVJKaltgn341HcwJWfVlWg$bpuIG09itt+g1R2MDOzS/QMoJstT6bWZTTVTcQlQ3cc=")))
response <- httr::GET(url, add_headers(.headers = c(Api_Key="6a07a7ee-ade3-4209-aa1b-b4504ebc0e68",
Api_Secret="pbkdf2_sha256$600000$eVJKaltgn341HcwJWfVlWg$bpuIG09itt+g1R2MDOzS/QMoJstT6bWZTTVTcQlQ3cc=")))
response
httr::add_headers
?VERB
response <- httr::GET(url, add_headers(.headers = c('Api_Key'="6a07a7ee-ade3-4209-aa1b-b4504ebc0e68",
'Api_Secret'="pbkdf2_sha256$600000$eVJKaltgn341HcwJWfVlWg$bpuIG09itt+g1R2MDOzS/QMoJstT6bWZTTVTcQlQ3cc=")))
response
response <- httr::GET(url, add_headers(.headers = c('Api-Key'="6a07a7ee-ade3-4209-aa1b-b4504ebc0e68",
'Api-Secret'="pbkdf2_sha256$600000$eVJKaltgn341HcwJWfVlWg$bpuIG09itt+g1R2MDOzS/QMoJstT6bWZTTVTcQlQ3cc=")))
response
response <- httr::GET(url, add_headers(.headers = c('Api-Key:'="6a07a7ee-ade3-4209-aa1b-b4504ebc0e68",
'Api-Secret:'="pbkdf2_sha256$600000$eVJKaltgn341HcwJWfVlWg$bpuIG09itt+g1R2MDOzS/QMoJstT6bWZTTVTcQlQ3cc=")))
response
response <- httr::GET(url, add_headers(.headers = c('Api-Key:6a07a7ee-ade3-4209-aa1b-b4504ebc0e68',
'Api-Secret:pbkdf2_sha256$600000$eVJKaltgn341HcwJWfVlWg$bpuIG09itt+g1R2MDOzS/QMoJstT6bWZTTVTcQlQ3cc=')))
response
response <- httr::GET(url, add_headers(.headers = c('Api-Key=6a07a7ee-ade3-4209-aa1b-b4504ebc0e68',
'Api-Secret=pbkdf2_sha256$600000$eVJKaltgn341HcwJWfVlWg$bpuIG09itt+g1R2MDOzS/QMoJstT6bWZTTVTcQlQ3cc=')))
headers <- c(
"Api-Key" = api_key,
"Api-Secret" = api_secret
)
headers
headers <- list(
"Api-Key" = api_key,
"Api-Secret" = api_secret
)
headers <- c(
"Api-Key" = api_key,
"Api-Secret" = api_secret
)
do.call(httr::add_headers,headers)
headers <- list(
"Api-Key" = api_key,
"Api-Secret" = api_secret
)
do.call(httr::add_headers,headers)
response <- httr::GET(url, add_headers(.headers = add_headers=do.call(httr::add_headers,headers)))
response <- httr::GET(url, add_headers(.headers = do.call(httr::add_headers,headers)))
t=do.call(httr::add_headers,headers)
class(t)
do.call(c(),headers)
do.call(c,headers)
do.call(as.character,headers)
response <- httr::GET(url, add_headers=do.call(httr::add_headers,headers))
response
do.call(httr::add_headers,headers)
response <- httr::GET(url, headers=do.call(httr::add_headers,headers))
response
?GET
response <- httr::GET(url, config =do.call(httr::add_headers,headers))
response
list(
"Api-Key" = api_key,
"Api-Secret" = api_secret
)
a=c(`Api-Key`="6a07a7ee-ade3-4209-aa1b-b4504ebc0e68",
`Api-Secret`="pbkdf2_sha256$600000$eVJKaltgn341HcwJWfVlWg$bpuIG09itt+g1R2MDOzS/QMoJstT6bWZTTVTcQlQ3cc=")
a
response <- httr::GET(url, add_headers(.headers = a))
response
response <- httr::GET(url, add_headers(.headers = a))
response
api_connect <- function(api_key, api_secret) {
base_url <- 'http://173.249.41.98/api'
headers <- c(
"Api-Key" = api_key,
"Api-Secret" = api_secret
)
return(list(base_url = base_url, headers = headers))
}
get_news <- function(connect_info, start_date, end_date) {
base_url <- connect_info$base_url
if (is.null(start_date) || is.null(end_date)) {
stop("start_date and end_date are required")
}
start_date <- format(start_date, "%d-%m-%Y")
end_date <- format(end_date, "%d-%m-%Y")
url <- paste0(base_url, "/news/?start_date=", start_date, "&end_date=", end_date)
response <- httr::GET(url, add_headers(.headers = connect_info$headers))
if (http_type(response) == "application/json" && response$status_code == 200) {
json_data <- httr::content(response, as = "text")
news_df <- lapply(jsonlite::fromJSON(json_data)$data, function(news) {
data.frame(
id = news$id,
title = news$title,
description = news$description,
content = news$content,
date = as.Date(news$date),
country = news$country,
countrysort = news$countrysort,
ncomments = news$ncomments,
mentions = news$mentions
)
})
return(do.call(rbind, news_df))
} else {
error <- content(response, as = "text")
if ("detail" %in% names(error)) {
stop(error$detail)
} else if ("message" %in% names(error)) {
stop(error$message)
} else {
stop("An error occured")
}
}
}
conn <- api_connect(api_key, api_secret)
start_date <- as.Date("2024-01-01")
end_date <- as.Date("2024-01-31")
news <- get_news(conn, start_date, end_date)
connect_info
response <- httr::GET(url, add_headers(.headers = connect_info$headers))
if (is.null(start_date) || is.null(end_date)) {
stop("start_date and end_date are required")
}
response$status_code == 200
http_type(response) == "application/json"
json_data <- httr::content(response, as = "text")
json_data
jsonlite::fromJSON(json_data)$data
news_df <- lapply(jsonlite::fromJSON(json_data)$data, function(news) {
data.frame(
id = news$id,
title = news$title,
description = news$description,
content = news$content,
date = as.Date(news$date),
country = news$country,
countrysort = news$countrysort,
ncomments = news$ncomments,
mentions = news$mentions
)
})
jsonlite::fromJSON(json_data)
news_df <- lapply(jsonlite::fromJSON(json_data), function(news) {
data.frame(
id = news$id,
title = news$title,
description = news$description,
content = news$content,
date = as.Date(news$date),
country = news$country,
countrysort = news$countrysort,
ncomments = news$ncomments,
mentions = news$mentions
)
})
d=jsonlite::fromJSON(json_data)
dd=d$data
View(dd)
names(dd)
get_news <- function(connect_info, start_date, end_date) {
base_url <- connect_info$base_url
if (is.null(start_date) || is.null(end_date)) {
stop("start_date and end_date are required")
}
start_date <- format(start_date, "%d-%m-%Y")
end_date <- format(end_date, "%d-%m-%Y")
url <- paste0(base_url, "/news/?start_date=", start_date, "&end_date=", end_date)
response <- httr::GET(url, add_headers(.headers = connect_info$headers))
if (http_type(response) == "application/json" && response$status_code == 200) {
json_data <- httr::content(response, as = "text")
news_df <- jsonlite::fromJSON(json_data)$data[,c("title","description","content","date",
"country","countrysort","ncomments","mentions")]
return(news_df)
} else {
error <- content(response, as = "text")
if ("detail" %in% names(error)) {
stop(error$detail)
} else if ("message" %in% names(error)) {
stop(error$message)
} else {
stop("An error occured")
}
}
}
news <- get_news(conn, start_date, end_date)
View(news)
library(jsonlite)
library(httr)
api_key <- "6a07a7ee-ade3-4209-aa1b-b4504ebc0e68"
api_secret <- "pbkdf2_sha256$600000$eVJKaltgn341HcwJWfVlWg$bpuIG09itt+g1R2MDOzS/QMoJstT6bWZTTVTcQlQ3cc="
getwd()
#add dependance package
usethis::use_package("httr")
usethis::use_package("jsonlite")
# Verifier la créeation avec succés du package
devtools::document()
devtools::check()
# Verifier la créeation avec succés du package
devtools::document()
devtools::check()
# Verifier la créeation avec succés du package
devtools::document()
devtools::check()
devtools::use_vignette()
usethis::use_vignette("Rnewswacafi")
# Verifier la créeation avec succés du package
devtools::document()
devtools::check()
usethis::use_vignette("Rnewswacafi")
version
# Package
library(devtools)
library(usethis)
library(knitr)
library(rmarkdown)
library(roxygen2)
library(pkgdown)
library(travis)
getwd()
# Verifier la créeation avec succés du package
devtools::document()
devtools::check()
# Verifier la créeation avec succés du package
devtools::document()
devtools::check()
usethis::use_vignette("Rnewswacafi")
# Verifier la créeation avec succés du package
devtools::document()
devtools::check()
usethis::use_vignette("Rnewswacafi")
